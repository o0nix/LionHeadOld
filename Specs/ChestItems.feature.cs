// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ChestItemsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ChestItems.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Chest Items", "As a player\r\nI want to open a chest and receive an item\r\nSo that I can use the it" +
                    "em in the game", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Chest Items")))
            {
                Specs.ChestItemsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have a player", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Receive item from loot table when only one item in loot table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Chest Items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("smoke-test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("player")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("chest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("loot")]
        public virtual void ReceiveItemFromLootTableWhenOnlyOneItemInLootTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive item from loot table when only one item in loot table", new string[] {
                        "smoke-test",
                        "player",
                        "chest",
                        "loot"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Drop chance"});
            table1.AddRow(new string[] {
                        "Sword",
                        "100"});
#line 11
 testRunner.Given("a configured loot table:", ((string)(null)), table1, "Given ");
#line 14
 testRunner.When("I roll on this loot table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("I receive a sword from the loot table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And("a log is written with the players username and received item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Receive item from loot table when multiple drop chances")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Chest Items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("player")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("chest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("loot")]
        public virtual void ReceiveItemFromLootTableWhenMultipleDropChances()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive item from loot table when multiple drop chances", new string[] {
                        "player",
                        "chest",
                        "loot"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Drop chance"});
            table2.AddRow(new string[] {
                        "Sword",
                        "10"});
            table2.AddRow(new string[] {
                        "Shield",
                        "10"});
            table2.AddRow(new string[] {
                        "Health Potion",
                        "30"});
            table2.AddRow(new string[] {
                        "Resurrection Phial",
                        "30"});
            table2.AddRow(new string[] {
                        "Scroll of wisdom",
                        "20"});
#line 20
 testRunner.Given("a configured loot table:", ((string)(null)), table2, "Given ");
#line 27
 testRunner.When("I roll on this loot table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("I receive a random item from the loot table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.And("a log is written with the players username and received item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No item from chest when empty loot table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Chest Items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("player")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("chest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("loot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("empty-chest")]
        public virtual void NoItemFromChestWhenEmptyLootTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No item from chest when empty loot table", new string[] {
                        "player",
                        "chest",
                        "loot",
                        "empty-chest"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Drop chance"});
#line 34
 testRunner.Given("a configured loot table:", ((string)(null)), table3, "Given ");
#line 36
 testRunner.When("I roll on this loot table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the chest is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("a log is written with the players username and that the chest was empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
